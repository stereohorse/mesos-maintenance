- hosts: agents
  become: yes
  vars:
    marathon_url: http://vm1:8080
  tasks:

    - name: stop mesos agent
      service:
        name: mesos-slave
        state: stopped
        enabled: false

    - name: get tasks on that host
      uri:
        url: "{{ marathon_url }}/v2/tasks"
        method: GET
        return_content: yes
        body_format: json
      register: response

    - set_fact:
        deployed_apps: >
          {{ response.json.tasks
           | selectattr('host', 'equalto', ansible_hostname)
           | map(attribute='appId')
           | unique
           | list }}

    - name: wait for tasks drain
      uri:
        url: "{{ marathon_url }}/v2/tasks"
        method: GET
        return_content: yes
        body_format: json
      register: response
      until: >
        response.json.tasks
        | selectattr('host', 'equalto', ansible_hostname)
        | join
        | length == 0
      retries: 30
      delay: 10

    - name: each drained app should has at least 1 healthy task
      uri:
        url: "{{ marathon_url }}/v2/apps"
        method: GET
        return_content: yes
        body_format: json
      register: response
      until: >
        deployed_apps
        | difference(
           response.json.apps
           | rejectattr('tasksHealthy', 'equalto', 0)
           | map(attribute='id')
           | unique
           | list)
        | length == 0
      retries: 12
      delay: 10
      ignore_errors: yes

      # not 'docker stop $(docker ps -aq)'
      # because we want independent fails
    - name: get containers started by agent
      shell: docker ps -aq -f 'name=mesos'
      register: containers

    - name: try to gracefully stop that containers
      shell: docker stop {{ item }}
      with_items: "{{ containers.stdout_lines }}"
      ignore_errors: yes

    - name: and delete them
      shell: docker rm {{ item }}
      with_items: "{{ containers.stdout_lines }}"
      ignore_errors: yes

    - name: delete mesos slave work dir
      file:
        path: /var/lib/mesos
        state: absent

    - name: start mesos agent
      service:
        name: mesos-slave
        state: started
        enabled: yes
